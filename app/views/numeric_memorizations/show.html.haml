#level_disp
  %ul
    - @time_limit_single_leve_infos.each do |level_info|
      - level, length, time = level_info.get_level_length_and_time
      - if user_signed_in? && @completed_levels.include?(level)
        %li.level_btn.completed{"data-level_info" => [level, length, time]}
          = "LEVEL#{level}"
          .level_info
            = "#{length}桁 | #{time}秒"
      - else
        %li.level_btn{"data-level_info" => [level, length, time]}
          = "LEVEL#{level}"
          .level_info
            = "#{length}桁 | #{time}秒"

#show_num_disp
  %span#show_num_area
  %span#count_down_disp
  .reset レベル選択
  #toAnswerDisp 回答画面へ

#answer_disp
  %input#answerInput{type: "tel"}
  #answerErrorBox
  #answerBtn 答える

#result_disp
  %table
    %tr
      %th あなたの回答
    %tr
      %td#submission_num
    %tr
      %th 正解
    %tr
      %td#correct_num
    %tr
      %th 成績
    %tr
      %td#result_record
  .reset レベルを選択する


:coffee
  $ ->
    ## プロパティー
    # レベル選択画面のプロパティー
    $level_disp = $('#level_disp')
    $level_btn = $('.level_btn')
    # 問題画面を表示する画面のプロパティー
    $show_num_disp = $('#show_num_disp')
    $show_num_area = $('#show_num_area')
    $count_down_disp = $('#count_down_disp')
    $toAnswerDisp = $('#toAnswerDisp')
    # 回答画面のプロパティー
    $answer_disp = $('#answer_disp')
    $answerInput = $('#answerInput') # 回答フォーム
    $answerErrorBox = $('#answerErrorBox') # 回答に問題があった場合にエラーを表示するための領域
    $answerBtn = $('#answerBtn') # 回答ボタン
    # 結果を表示する画面
    $result_disp = $('#result_disp')
    $submission_num = $('#submission_num')
    $correct_num = $('#correct_num')
    $result_record = $('#result_record')
    $reset = $('.reset')


    ## グローバル変数・定数定義
    DONT_WAIT_TIME = 0
    LEVEL_INFO_DISP_TIME = 1500
    REGEX = /^[0-9]*$/
    SECOND = 1000
    timerIds = []
    timerIDForCountDown = null


    ## 関数
    # 画面遷移用関数
    screenTransition = (current, to, time) ->
      timerIds[timerIds.length] = setTimeout ->
        current.hide()
        to.fadeIn()
      , time
    # 記憶対象の数値を生成する関数
    generateNum = (digit) ->
      problemNum = ""
      for i in [1..digit]
        problemNum += String(Math.floor(Math.random() * 10))
        problemNum += "<br>" if i % 10 is 0 # 1行につき10桁表示
      return problemNum
    # 問題画面と結果画面に正解をセットする
    setCorrectAnswerToDisp = (memorize_this_num) ->
      $show_num_area.html(memorize_this_num)
      $correct_num.html(memorize_this_num)
    # 回答フォームの入力の上限値を追加する
    setMaxLengthToInput = (max_length) ->
      $answerInput.attr('maxlength', max_length)
    # カウントダウンタイマーを更新するための関数
    countDownTimer = (time, digit) ->
      $count_down_disp.text((time / SECOND).toFixed())
      if time < 0
        clearTimeout(timerIDForCountDown)
        return
      timerIDForCountDown = setTimeout ->
        time -= SECOND
        countDownTimer(time, digit)
      , SECOND
    # 満点を取ったレベルは灰色にする。
    updateLevelButtonStyle = (level) -> $level_btn[level-1].className = 'level_btn completed' # jQueryの要素
    # 結果をajaxで送信
    sendAjax = (level, point, isPerfect)->
      $.ajax
        url: "/numeric_memorizations",
        type: "POST",
        data:
          level: level
          point: point
          cleared: isPerfect # 満点ならtrue
    # 回答と、正しい答えを比較し、赤をいれる
    returnCorrectionNum = (answer, correct) ->
      correct_count = 0
      correction_num = ""
      for i in [0...correct.length]
        if answer[i] is correct[i]
          correct_count++
          correction_num += correct[i]
        else
          if answer[i] is undefined then correction_num += "<span style='color:tomato;'>_</span>"
          else correction_num += "<span style='color:tomato;'>" + answer[i] + "</span>"
        correction_num += '<br>' if (i + 1) % 10 is 0
      return [correct_count, correction_num]
    # 採点結果を取得するための関数
    checkAnswer = (answer, correct) ->
      [correct_count, correction_num] = returnCorrectionNum(answer, correct)
      result_record = correct_count + "/" + correct.length + " (" + ((correct_count / correct.length) * 100).toFixed(1) + "%)"
      isPerfect = if correct_count is correct.length then true else false
      return [correction_num, result_record, correct_count, isPerfect]
    # 採点結果を描画するための関数
    generateResultDisp = (correction_num, result_record) ->
      $submission_num.html(correction_num)
      $result_record.text(result_record)
    # レベル選択画面に遷移するための関数
    transitionToLevelDisp = ->
      $show_num_disp.hide()
      $answer_disp.hide()
      $result_disp.hide()
      $level_disp.fadeIn()
    # 諸々を初期化用関数
    init = ->
      $answerInput.val("")
      $answerErrorBox.empty()
      $(document.body).css('background', '#fff')
      # screenTransition関数で取得した全てのタイマーIDをクリアする
      for timerId in timerIds then clearTimeout(timerId)
      clearTimeout(timerIDForCountDown)


    ## イベント処理
    # レベル選択時
    $level_btn.click ->
      # 選択したレベルの情報を配列として取得。[レベル, 桁数, 秒数]が入る。
      level_info_array = $(this).data('level_info')
      time_until_answer_disp_is_showed = level_info_array[2] * 1000
      $answerBtn.data('level', level_info_array[0]) # 答えを押した時に、選択レベルの情報が必要なため、dataで持たせてる
      # 問題画面と結果画面に正解をセットする
      setCorrectAnswerToDisp(generateNum(level_info_array[1]))
      # 回答フォームの入力の上限値を追加する
      setMaxLengthToInput(level_info_array[1])
      # レベル選択画面 => 問題画面
      screenTransition($level_disp, $show_num_disp, DONT_WAIT_TIME)
      # 記憶対象となる数値を表示する画面 => 回答画面
      countDownTimer(time_until_answer_disp_is_showed, level_info_array[1])
      screenTransition($show_num_disp, $answer_disp, time_until_answer_disp_is_showed)
    # 回答ボタン選択時
    $answerBtn.click ->
      REGEX = /^[0-9]*$/
      level = $(this).data('level')
      if REGEX.exec($answerInput.val())
        # 回答画面 => 結果表示画面
        screenTransition($answer_disp, $result_disp, DONT_WAIT_TIME)
        [correction_num, result_record, correct_count, isPerfect] = checkAnswer($answerInput.val(), $show_num_area.text())
        updateLevelButtonStyle(level) if isPerfect
        sendAjax(level, correct_count, isPerfect)
        generateResultDisp(correction_num, result_record)
      else
        $answerErrorBox.text("入力した値に誤りがあります。（数値のみ）")
    # 「レベルを選択する」ボタンを押した時
    $reset.click ->
      # 諸々を初期化用関数
      init()
      # 結果表示画面 => レベル選択画面
      transitionToLevelDisp()

    $toAnswerDisp.click ->
      clearTimeout(timerIDForCountDown)
      for timerId in timerIds then clearTimeout(timerId)
      clearTimeout(timerIDForCountDown)
      screenTransition($show_num_disp, $answer_disp, DONT_WAIT_TIME)
